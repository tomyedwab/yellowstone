package com.tomyedwab.yellowstone.generated

import androidx.lifecycle.LiveData
import com.google.gson.reflect.TypeToken
import com.tomyedwab.yellowstone.services.connection.DataViewResult
import com.tomyedwab.yellowstone.services.connection.DataViewService
import com.tomyedwab.yellowstone.provider.connection.HubConnectionState

// Auto-generated from backend/tasks/schema/api.yml
// Do not edit this file directly

class ApiRoutes(
    private val dataViewService: DataViewService,
    private val connectionState: LiveData<HubConnectionState>
) {

    /**
     * Get all tasks for a specific task list
     */
    fun getTaskList(listId: Int): LiveData<DataViewResult<TaskResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/task/list",
            apiParams = mapOf(
                "listId" to listId.toString()
            ),
            typeToken = object : TypeToken<TaskResponse>() {}
        )
    }
    /**
     * Get a specific task by ID
     */
    fun getTaskGet(id: Int): LiveData<DataViewResult<Task>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/task/get",
            apiParams = mapOf(
                "id" to id.toString()
            ),
            typeToken = object : TypeToken<Task>() {}
        )
    }
    /**
     * Get the history of changes for a specific task
     */
    fun getTaskHistory(id: Int): LiveData<DataViewResult<TaskHistoryResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/task/history",
            apiParams = mapOf(
                "id" to id.toString()
            ),
            typeToken = object : TypeToken<TaskHistoryResponse>() {}
        )
    }
    /**
     * Get a specific task list by ID
     */
    fun getTasklistGet(id: Int): LiveData<DataViewResult<TaskList>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/get",
            apiParams = mapOf(
                "id" to id.toString()
            ),
            typeToken = object : TypeToken<TaskList>() {}
        )
    }
    /**
     * Get all task lists
     */
    fun getTasklistAll(): LiveData<DataViewResult<TaskListResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/all",
            apiParams = emptyMap(),
            typeToken = object : TypeToken<TaskListResponse>() {}
        )
    }
    /**
     * Get all task lists in the 'toDoList' category
     */
    fun getTasklistTodo(): LiveData<DataViewResult<TaskListResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/todo",
            apiParams = emptyMap(),
            typeToken = object : TypeToken<TaskListResponse>() {}
        )
    }
    /**
     * Get all task lists in the 'template' category
     */
    fun getTasklistTemplate(): LiveData<DataViewResult<TaskListResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/template",
            apiParams = emptyMap(),
            typeToken = object : TypeToken<TaskListResponse>() {}
        )
    }
    /**
     * Get all archived task lists
     */
    fun getTasklistArchived(): LiveData<DataViewResult<TaskListResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/archived",
            apiParams = emptyMap(),
            typeToken = object : TypeToken<TaskListResponse>() {}
        )
    }
    /**
     * Get metadata (total and completed task counts) for all task lists
     */
    fun getTasklistMetadata(): LiveData<DataViewResult<TaskListMetadataResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/metadata",
            apiParams = emptyMap(),
            typeToken = object : TypeToken<TaskListMetadataResponse>() {}
        )
    }
    /**
     * Get recent comments for tasks in a specific task list
     */
    fun getTasklistRecentComments(listId: Int): LiveData<DataViewResult<TaskRecentCommentResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/recent_comments",
            apiParams = mapOf(
                "listId" to listId.toString()
            ),
            typeToken = object : TypeToken<TaskRecentCommentResponse>() {}
        )
    }
    /**
     * Get all task labels for tasks in a specific task list
     */
    fun getTasklistLabels(listId: Int): LiveData<DataViewResult<TaskLabelsResponse>> {
        return dataViewService.createDataView(
            connectionState = connectionState,
            componentName = "yellowstone",
            apiPath = "api/tasklist/labels",
            apiParams = mapOf(
                "listId" to listId.toString()
            ),
            typeToken = object : TypeToken<TaskLabelsResponse>() {}
        )
    }
}