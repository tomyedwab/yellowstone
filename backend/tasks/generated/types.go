// Code generated by generate_types.go; DO NOT EDIT.

package generated

import (
	"github.com/jmoiron/sqlx"
	"github.com/tomyedwab/yesterday/applib/database"
	"github.com/tomyedwab/yesterday/applib/httputils"
	"net/http"
	"strconv"
	"time"
)

// Generated Types from types.yml

// Represents a single task in the system
type Task struct {
	CompletedAt *time.Time `json:"CompletedAt"` // Timestamp when the task was completed, null if not completed
	DueDate     *time.Time `json:"DueDate"`     // Optional due date for the task
	Id          int        `json:"Id"`          // Unique identifier for the task
	Title       string     `json:"Title"`       // Title/name of the task
}

// Represents a single history entry for a task
type TaskHistory struct {
	CreatedAt     time.Time `json:"CreatedAt"`     // When this history entry was created
	Id            int       `json:"Id"`            // Unique identifier for the history entry
	SystemComment string    `json:"SystemComment"` // System-generated comment describing the change
	TaskId        int       `json:"TaskId"`        // ID of the task this history entry belongs to
	UpdateType    string    `json:"UpdateType"`    // Type of update (update_title, update_completed, update_due_date, delete, add_comment)
	UserComment   *string   `json:"UserComment"`   // Optional user-provided comment
}

// Response containing task history and title
type TaskHistoryResponse struct {
	History []TaskHistory `json:"History"` // Array of history entries for the task
	Title   string        `json:"Title"`   // Current title of the task
}

// Label information for a task
type TaskLabels struct {
	Label  string `json:"Label"`  // The label text
	ListId int    `json:"ListId"` // ID of the list representing this label
	TaskId int    `json:"TaskId"` // ID of the task with the label
}

// Response containing task labels for tasks in a list
type TaskLabelsResponse struct {
	Labels []TaskLabels `json:"Labels"` // Array of task label entries
}

// Represents a task list in the system
type TaskList struct {
	Archived bool   `json:"Archived"` // Whether the task list is archived
	Category string `json:"Category"` // Category of the list (toDoList, template, label, etc.)
	Id       int    `json:"Id"`       // Unique identifier for the task list
	Title    string `json:"Title"`    // Title/name of the task list
}

// Metadata information for a task list
type TaskListMetadata struct {
	Completed int `json:"Completed"` // Number of completed tasks in the list
	ListId    int `json:"ListId"`    // ID of the task list
	Total     int `json:"Total"`     // Total number of tasks in the list
}

// Response containing task list metadata
type TaskListMetadataResponse struct {
	Metadata []TaskListMetadata `json:"Metadata"` // Array of metadata entries for task lists
}

// Response containing a list of task lists
type TaskListResponse struct {
	TaskLists []TaskList `json:"TaskLists"` // Array of task lists
}

// Recent comment information for a task
type TaskRecentComment struct {
	CreatedAt   *time.Time `json:"CreatedAt"`   // When the comment was created, null if no comment
	ListId      int        `json:"ListId"`      // ID of the task list containing the task
	TaskId      int        `json:"TaskId"`      // ID of the task with the comment
	UserComment *string    `json:"UserComment"` // The user comment, null if no comment
}

// Response containing recent comments for tasks in a list
type TaskRecentCommentResponse struct {
	Comments []TaskRecentComment `json:"Comments"` // Array of recent comment entries
}

// Response containing a list of tasks
type TaskResponse struct {
	Tasks []Task `json:"Tasks"` // Array of tasks
}

// Generated Event Types from events.yml

// Event to add a new task
type TaskAddEvent struct {
	DueDate    *time.Time `json:"DueDate"`    // Optional due date for the task
	TaskListId int        `json:"TaskListId"` // ID of the task list to add the task to
	Title      string     `json:"Title"`      // Title of the new task
}

// Event to add a user comment to a task
type TaskAddCommentEvent struct {
	TaskId      int    `json:"TaskId"`      // ID of the task to add comment to
	UserComment string `json:"UserComment"` // The user comment to add
}

// Event to delete a task
type TaskDeleteEvent struct {
	TaskId int `json:"TaskId"` // ID of the task to delete
}

// Event to update a task's completion status
type TaskUpdateCompletedEvent struct {
	CompletedAt *time.Time `json:"CompletedAt"` // Completion timestamp, null to mark as not completed
	TaskId      int        `json:"TaskId"`      // ID of the task to update
}

// Event to update a task's due date
type TaskUpdateDueDateEvent struct {
	DueDate *time.Time `json:"DueDate"` // New due date, null to remove due date
	TaskId  int        `json:"TaskId"`  // ID of the task to update
}

// Event to update a task's title
type TaskUpdateTitleEvent struct {
	TaskId int    `json:"TaskId"` // ID of the task to update
	Title  string `json:"Title"`  // New title for the task
}

// Event to add a new task list
type TaskListAddEvent struct {
	Archived bool   `json:"Archived"` // Whether the task list should be archived
	Category string `json:"Category"` // Category of the task list (toDoList, template, label, etc.)
	Title    string `json:"Title"`    // Title of the new task list
}

// Event to add a task to a task list
type TaskListAddTaskEvent struct {
	ListId int `json:"ListId"` // ID of the list to add the task to
	TaskId int `json:"TaskId"` // ID of the task to add
}

// Event to copy tasks to another list
type TaskListCopyTasksEvent struct {
	NewListId int   `json:"NewListId"` // ID of the destination list
	TaskIds   []int `json:"TaskIds"`   // Array of task IDs to copy
}

// Event to duplicate tasks to another list
type TaskListDuplicateTasksEvent struct {
	NewListId int   `json:"NewListId"` // ID of the destination list
	TaskIds   []int `json:"TaskIds"`   // Array of task IDs to duplicate
}

// Event to move tasks from one list to another
type TaskListMoveTasksEvent struct {
	NewListId int   `json:"NewListId"` // ID of the destination list
	OldListId int   `json:"OldListId"` // ID of the source list
	TaskIds   []int `json:"TaskIds"`   // Array of task IDs to move
}

// Event to reorder a task list
type TaskListReorderEvent struct {
	AfterListId *int `json:"AfterListId"` // ID of the list to place this list after, null to move to front
	ListId      int  `json:"ListId"`      // ID of the task list to reorder
}

// Event to reorder tasks within a list
type TaskListReorderTasksEvent struct {
	AfterTaskId *int `json:"AfterTaskId"` // ID of the task to place this task after, null to move to front
	OldTaskId   int  `json:"OldTaskId"`   // ID of the task to reorder
	TaskListId  int  `json:"TaskListId"`  // ID of the task list containing the tasks
}

// Event to update a task list's archived status
type TaskListUpdateArchivedEvent struct {
	Archived bool `json:"Archived"` // New archived status for the task list
	ListId   int  `json:"ListId"`   // ID of the task list to update
}

// Event to update a task list's title
type TaskListUpdateTitleEvent struct {
	ListId int    `json:"ListId"` // ID of the task list to update
	Title  string `json:"Title"`  // New title for the task list
}

// Generated Resolver Interface from api.yml

type Resolver interface {
	GetApiTaskList(db *sqlx.DB, listId int) (TaskResponse, error)
	GetApiTaskGet(db *sqlx.DB, id int) (Task, error)
	GetApiTaskHistory(db *sqlx.DB, id int) (TaskHistoryResponse, error)
	GetApiTasklistGet(db *sqlx.DB, id int) (TaskList, error)
	GetApiTasklistAll(db *sqlx.DB) (TaskListResponse, error)
	GetApiTasklistTodo(db *sqlx.DB) (TaskListResponse, error)
	GetApiTasklistTemplate(db *sqlx.DB) (TaskListResponse, error)
	GetApiTasklistArchived(db *sqlx.DB) (TaskListResponse, error)
	GetApiTasklistMetadata(db *sqlx.DB) (TaskListMetadataResponse, error)
	GetApiTasklistRecent_comments(db *sqlx.DB, listId int) (TaskRecentCommentResponse, error)
	GetApiTasklistLabels(db *sqlx.DB, listId int) (TaskLabelsResponse, error)
}

// Generated EventHandler Interface from events.yml

type EventHandler interface {
	HandleTaskAddEvent(tx *sqlx.Tx, event *TaskAddEvent) (bool, error)
	HandleTaskAddCommentEvent(tx *sqlx.Tx, event *TaskAddCommentEvent) (bool, error)
	HandleTaskDeleteEvent(tx *sqlx.Tx, event *TaskDeleteEvent) (bool, error)
	HandleTaskUpdateCompletedEvent(tx *sqlx.Tx, event *TaskUpdateCompletedEvent) (bool, error)
	HandleTaskUpdateDueDateEvent(tx *sqlx.Tx, event *TaskUpdateDueDateEvent) (bool, error)
	HandleTaskUpdateTitleEvent(tx *sqlx.Tx, event *TaskUpdateTitleEvent) (bool, error)
	HandleTaskListAddEvent(tx *sqlx.Tx, event *TaskListAddEvent) (bool, error)
	HandleTaskListAddTaskEvent(tx *sqlx.Tx, event *TaskListAddTaskEvent) (bool, error)
	HandleTaskListCopyTasksEvent(tx *sqlx.Tx, event *TaskListCopyTasksEvent) (bool, error)
	HandleTaskListDuplicateTasksEvent(tx *sqlx.Tx, event *TaskListDuplicateTasksEvent) (bool, error)
	HandleTaskListMoveTasksEvent(tx *sqlx.Tx, event *TaskListMoveTasksEvent) (bool, error)
	HandleTaskListReorderEvent(tx *sqlx.Tx, event *TaskListReorderEvent) (bool, error)
	HandleTaskListReorderTasksEvent(tx *sqlx.Tx, event *TaskListReorderTasksEvent) (bool, error)
	HandleTaskListUpdateArchivedEvent(tx *sqlx.Tx, event *TaskListUpdateArchivedEvent) (bool, error)
	HandleTaskListUpdateTitleEvent(tx *sqlx.Tx, event *TaskListUpdateTitleEvent) (bool, error)
}

// Generated initialization function

func InitHandlers(db *database.Database, resolver Resolver, eventHandler EventHandler) error {
	// Register event handlers
	database.AddEventHandler(db, "Task:Add", func(tx *sqlx.Tx, event *TaskAddEvent) (bool, error) {
		return eventHandler.HandleTaskAddEvent(tx, event)
	})
	database.AddEventHandler(db, "Task:AddComment", func(tx *sqlx.Tx, event *TaskAddCommentEvent) (bool, error) {
		return eventHandler.HandleTaskAddCommentEvent(tx, event)
	})
	database.AddEventHandler(db, "Task:Delete", func(tx *sqlx.Tx, event *TaskDeleteEvent) (bool, error) {
		return eventHandler.HandleTaskDeleteEvent(tx, event)
	})
	database.AddEventHandler(db, "Task:UpdateCompleted", func(tx *sqlx.Tx, event *TaskUpdateCompletedEvent) (bool, error) {
		return eventHandler.HandleTaskUpdateCompletedEvent(tx, event)
	})
	database.AddEventHandler(db, "Task:UpdateDueDate", func(tx *sqlx.Tx, event *TaskUpdateDueDateEvent) (bool, error) {
		return eventHandler.HandleTaskUpdateDueDateEvent(tx, event)
	})
	database.AddEventHandler(db, "Task:UpdateTitle", func(tx *sqlx.Tx, event *TaskUpdateTitleEvent) (bool, error) {
		return eventHandler.HandleTaskUpdateTitleEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:Add", func(tx *sqlx.Tx, event *TaskListAddEvent) (bool, error) {
		return eventHandler.HandleTaskListAddEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:AddTask", func(tx *sqlx.Tx, event *TaskListAddTaskEvent) (bool, error) {
		return eventHandler.HandleTaskListAddTaskEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:CopyTasks", func(tx *sqlx.Tx, event *TaskListCopyTasksEvent) (bool, error) {
		return eventHandler.HandleTaskListCopyTasksEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:DuplicateTasks", func(tx *sqlx.Tx, event *TaskListDuplicateTasksEvent) (bool, error) {
		return eventHandler.HandleTaskListDuplicateTasksEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:MoveTasks", func(tx *sqlx.Tx, event *TaskListMoveTasksEvent) (bool, error) {
		return eventHandler.HandleTaskListMoveTasksEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:Reorder", func(tx *sqlx.Tx, event *TaskListReorderEvent) (bool, error) {
		return eventHandler.HandleTaskListReorderEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:ReorderTasks", func(tx *sqlx.Tx, event *TaskListReorderTasksEvent) (bool, error) {
		return eventHandler.HandleTaskListReorderTasksEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:UpdateArchived", func(tx *sqlx.Tx, event *TaskListUpdateArchivedEvent) (bool, error) {
		return eventHandler.HandleTaskListUpdateArchivedEvent(tx, event)
	})
	database.AddEventHandler(db, "TaskList:UpdateTitle", func(tx *sqlx.Tx, event *TaskListUpdateTitleEvent) (bool, error) {
		return eventHandler.HandleTaskListUpdateTitleEvent(tx, event)
	})

	// Register HTTP routes
	http.HandleFunc("/api/task/list", func(w http.ResponseWriter, r *http.Request) {
		listIdStr := r.URL.Query().Get("listId")
		if listIdStr == "" {
			http.Error(w, "Missing listId parameter", http.StatusBadRequest)
			return
		}
		listId, err := strconv.Atoi(listIdStr)
		if err != nil {
			http.Error(w, "Invalid listId parameter", http.StatusBadRequest)
			return
		}

		resp, err := resolver.GetApiTaskList(db.GetDB(), listId)
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/task/get", func(w http.ResponseWriter, r *http.Request) {
		idStr := r.URL.Query().Get("id")
		if idStr == "" {
			http.Error(w, "Missing id parameter", http.StatusBadRequest)
			return
		}
		id, err := strconv.Atoi(idStr)
		if err != nil {
			http.Error(w, "Invalid id parameter", http.StatusBadRequest)
			return
		}

		resp, err := resolver.GetApiTaskGet(db.GetDB(), id)
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/task/history", func(w http.ResponseWriter, r *http.Request) {
		idStr := r.URL.Query().Get("id")
		if idStr == "" {
			http.Error(w, "Missing id parameter", http.StatusBadRequest)
			return
		}
		id, err := strconv.Atoi(idStr)
		if err != nil {
			http.Error(w, "Invalid id parameter", http.StatusBadRequest)
			return
		}

		resp, err := resolver.GetApiTaskHistory(db.GetDB(), id)
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/get", func(w http.ResponseWriter, r *http.Request) {
		idStr := r.URL.Query().Get("id")
		if idStr == "" {
			http.Error(w, "Missing id parameter", http.StatusBadRequest)
			return
		}
		id, err := strconv.Atoi(idStr)
		if err != nil {
			http.Error(w, "Invalid id parameter", http.StatusBadRequest)
			return
		}

		resp, err := resolver.GetApiTasklistGet(db.GetDB(), id)
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/all", func(w http.ResponseWriter, r *http.Request) {

		resp, err := resolver.GetApiTasklistAll(db.GetDB())
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/todo", func(w http.ResponseWriter, r *http.Request) {

		resp, err := resolver.GetApiTasklistTodo(db.GetDB())
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/template", func(w http.ResponseWriter, r *http.Request) {

		resp, err := resolver.GetApiTasklistTemplate(db.GetDB())
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/archived", func(w http.ResponseWriter, r *http.Request) {

		resp, err := resolver.GetApiTasklistArchived(db.GetDB())
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/metadata", func(w http.ResponseWriter, r *http.Request) {

		resp, err := resolver.GetApiTasklistMetadata(db.GetDB())
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/recent_comments", func(w http.ResponseWriter, r *http.Request) {
		listIdStr := r.URL.Query().Get("listId")
		if listIdStr == "" {
			http.Error(w, "Missing listId parameter", http.StatusBadRequest)
			return
		}
		listId, err := strconv.Atoi(listIdStr)
		if err != nil {
			http.Error(w, "Invalid listId parameter", http.StatusBadRequest)
			return
		}

		resp, err := resolver.GetApiTasklistRecent_comments(db.GetDB(), listId)
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})
	http.HandleFunc("/api/tasklist/labels", func(w http.ResponseWriter, r *http.Request) {
		listIdStr := r.URL.Query().Get("listId")
		if listIdStr == "" {
			http.Error(w, "Missing listId parameter", http.StatusBadRequest)
			return
		}
		listId, err := strconv.Atoi(listIdStr)
		if err != nil {
			http.Error(w, "Invalid listId parameter", http.StatusBadRequest)
			return
		}

		resp, err := resolver.GetApiTasklistLabels(db.GetDB(), listId)
		httputils.HandleAPIResponse(w, r, resp, err, http.StatusInternalServerError)
	})

	return nil
}
